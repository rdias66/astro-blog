---
import { LOCALES, SITE } from '../config'
import '../styles/global.css'
import { ViewTransitions } from 'astro:transitions'

const currentLocale = Astro.url.pathname.includes('/pt')
  ? LOCALES.pt
  : LOCALES.en

export interface Props {
  title?: string
  author?: string
  profile?: string
  description?: string
  ogImage?: string
  canonicalURL?: string
  pubDatetime?: Date
  modDatetime?: Date | null
  scrollSmooth?: boolean
}

const {
  title = SITE.title,
  author = SITE.author,
  profile = SITE.profile,
  description = SITE.desc,
  ogImage = SITE.ogImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  scrollSmooth = false,
} = Astro.props

const socialImageURL = new URL(
  ogImage ?? SITE.ogImage ?? 'og.png',
  Astro.url.origin,
).href

const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'BlogPosting',
  headline: title,
  image: socialImageURL,
  datePublished: pubDatetime?.toISOString(),
  ...(modDatetime && { dateModified: modDatetime.toISOString() }),
  author: [
    {
      '@type': 'Person',
      name: author,
      url: profile,
    },
  ],
}
---

<!doctype html>
<html lang={currentLocale.lang} class={scrollSmooth ? 'scroll-smooth' : ''}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />
    {
      pubDatetime && (
        <meta
          property="article:published_time"
          content={pubDatetime.toISOString()}
        />
      )
    }
    {
      modDatetime && (
        <meta
          property="article:modified_time"
          content={modDatetime.toISOString()}
        />
      )
    }
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImageURL} />
    <script
      type="application/ld+json"
      set:html={JSON.stringify(structuredData)}
    />
    <meta name="theme-color" content="" />
    <ViewTransitions />

    <!-- Import Theme Toggle Script -->
    <script is:inline>
      // Initialize theme based on localStorage
      ;(function () {
        const savedTheme = localStorage.getItem('theme') || 'dark' // Default to dark
        document.documentElement.setAttribute('data-theme', savedTheme)
      })()
    </script>
    <script is:inline src="/scripts/theme-toggle.js" async></script>
    <script
      src="https://kit.fontawesome.com/9edb9e3e09.js"
      crossorigin="anonymous"></script>
  </head>
  <body>
    <slot />
  </body>
</html>
